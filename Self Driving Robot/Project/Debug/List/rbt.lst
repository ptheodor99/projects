
AVRASM ver. 2.1.30  C:\Users\Alex\OneDrive\Documente\MEDITATII\00A Proiecte\Proiecte\roboteluuu\Debug\List\rbt.asm Wed Aug 02 22:27:21 2023

C:\Users\Alex\OneDrive\Documente\MEDITATII\00A Proiecte\Proiecte\roboteluuu\Debug\List\rbt.asm(1420): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bff5      	OUT  MCUCR,R31
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e0a0      	LDI  R26,LOW(__SRAM_START)
00004d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000051 e0e0      	LDI  R30,__GPIOR0_INIT
000052 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
000055 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000056 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000057 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000058 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000059 940c 00d4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void mooveForward(){
                 ; 0000 000A void mooveForward(){
                 
                 	.CSEG
                 _mooveForward:
                 ; .FSTART _mooveForward
                 ; 0000 000B PORTB.0 = 1; //en1&2
00005b 9a28      	SBI  0x5,0
                 ; 0000 000C PORTB.1 = 1; //i1
00005c 9a29      	SBI  0x5,1
                 ; 0000 000D PORTB.2 = 0; //i2
00005d 982a      	CBI  0x5,2
                 ; 0000 000E PORTB.3 = 1; //en2&3
00005e 9a2b      	SBI  0x5,3
                 ; 0000 000F PORTB.4 = 1; //i3
00005f 9a2c      	SBI  0x5,4
                 ; 0000 0010 PORTB.5 = 0; //i4
000060 c016      	RJMP _0x2000003
                 ; 0000 0011 }
                 ; .FEND
                 ;void mooveBackward(){
                 ; 0000 0013 void mooveBackward(){
                 _mooveBackward:
                 ; .FSTART _mooveBackward
                 ; 0000 0014 PORTB.0 = 1; //en1&2
000061 9a28      	SBI  0x5,0
                 ; 0000 0015 PORTB.1 = 0; //i1
000062 9829      	CBI  0x5,1
                 ; 0000 0016 PORTB.2 = 1; //i2
000063 9a2a      	SBI  0x5,2
                 ; 0000 0017 PORTB.3 = 1; //en2&3
000064 c009      	RJMP _0x2000004
                 ; 0000 0018 PORTB.4 = 0; //i3
                 ; 0000 0019 PORTB.5 = 1; //i4
                 ; 0000 001A }
                 ; .FEND
                 ;void mooveLeft(){
                 ; 0000 001C void mooveLeft(){
                 _mooveLeft:
                 ; .FSTART _mooveLeft
                 ; 0000 001D PORTB.0 = 1; //en1&2
000065 9a28      	SBI  0x5,0
                 ; 0000 001E PORTB.1 = 0; //i1
000066 9829      	CBI  0x5,1
                 ; 0000 001F PORTB.2 = 1; //i2
000067 9a2a      	SBI  0x5,2
                 ; 0000 0020 PORTB.3 = 1; //en2&3
000068 9a2b      	SBI  0x5,3
                 ; 0000 0021 PORTB.4 = 1; //i3
000069 9a2c      	SBI  0x5,4
                 ; 0000 0022 PORTB.5 = 0; //i4
00006a c00c      	RJMP _0x2000003
                 ; 0000 0023 }
                 ; .FEND
                 ;void mooveRight(){
                 ; 0000 0025 void mooveRight(){
                 _mooveRight:
                 ; .FSTART _mooveRight
                 ; 0000 0026 PORTB.0 = 1; //en1&2
00006b 9a28      	SBI  0x5,0
                 ; 0000 0027 PORTB.1 = 1; //i1
00006c 9a29      	SBI  0x5,1
                 ; 0000 0028 PORTB.2 = 0; //i2
00006d 982a      	CBI  0x5,2
                 ; 0000 0029 PORTB.3 = 1; //en2&3
                 _0x2000004:
00006e 9a2b      	SBI  0x5,3
                 ; 0000 002A PORTB.4 = 0; //i3
00006f 982c      	CBI  0x5,4
                 ; 0000 002B PORTB.5 = 1; //i4
000070 9a2d      	SBI  0x5,5
                 ; 0000 002C }
000071 9508      	RET
                 ; .FEND
                 ;void Stop(){
                 ; 0000 002E void Stop(){
                 _Stop:
                 ; .FSTART _Stop
                 ; 0000 002F PORTB.0 = 0; //en1&2
000072 9828      	CBI  0x5,0
                 ; 0000 0030 PORTB.1 = 0; //i1
000073 9829      	CBI  0x5,1
                 ; 0000 0031 PORTB.2 = 0; //i2
000074 982a      	CBI  0x5,2
                 ; 0000 0032 PORTB.3 = 0; //en2&3
000075 982b      	CBI  0x5,3
                 ; 0000 0033 PORTB.4 = 0; //i3
000076 982c      	CBI  0x5,4
                 ; 0000 0034 PORTB.5 = 0; //i4
                 _0x2000003:
000077 982d      	CBI  0x5,5
                 ; 0000 0035 }
000078 9508      	RET
                 ; .FEND
                 ;int readHCF(){
                 ; 0000 0037 int readHCF(){
                 _readHCF:
                 ; .FSTART _readHCF
                 ; 0000 0038 int n = 0;
                 ; 0000 0039 PORTC.7 = 1;
000079 d0fb      	RCALL SUBOPT_0x0
                 ;	n -> R16,R17
00007a 9a47      	SBI  0x8,7
                 ; 0000 003A delay_us(10);
                +
00007b e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
00007c 958a     +DEC R24
00007d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 003B PORTC.7 = 0;
00007e 9847      	CBI  0x8,7
                 ; 0000 003C 
                 ; 0000 003D while(PINC.6 == 0)
                 _0x43:
00007f 9936      	SBIC 0x6,6
000080 c004      	RJMP _0x45
                 ; 0000 003E delay_us(1);
                +
000081 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
000082 958a     +DEC R24
000083 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
000084 cffa      	RJMP _0x43
                 _0x45:
                 ; 0000 0040 while(PINC.6 == 1){
                 _0x46:
000085 9b36      	SBIS 0x6,6
000086 c002      	RJMP _0x48
                 ; 0000 0041 n+=1;
000087 d0f2      	RCALL SUBOPT_0x1
                 ; 0000 0042 delay_us(1);
                 ; 0000 0043 
                 ; 0000 0044 
                 ; 0000 0045 }
000088 cffc      	RJMP _0x46
                 _0x48:
                 ; 0000 0046 
                 ; 0000 0047 n = (int)(float)n * 0.04 / 2;
000089 d0f6      	RCALL SUBOPT_0x2
00008a c045      	RJMP _0x2000001
                 ; 0000 0048 
                 ; 0000 0049 return n;
                 ; 0000 004A }
                 ; .FEND
                 ;int getHCF(){
                 ; 0000 004C int getHCF(){
                 _getHCF:
                 ; .FSTART _getHCF
                 ; 0000 004D int dist = 0;
                 ; 0000 004E 
                 ; 0000 004F for(i = 0; i < 3; i++){
00008b d0e9      	RCALL SUBOPT_0x0
                 ;	dist -> R16,R17
00008c 2444      	CLR  R4
                 _0x4A:
00008d e0e3      	LDI  R30,LOW(3)
00008e 164e      	CP   R4,R30
00008f f420      	BRSH _0x4B
                 ; 0000 0050 dist += readHCF();
000090 dfe8      	RCALL _readHCF
000091 d10a      	RCALL SUBOPT_0x3
                 ; 0000 0051 delay_ms(10);
                 ; 0000 0052 }
000092 9443      	INC  R4
000093 cff9      	RJMP _0x4A
                 _0x4B:
                 ; 0000 0053 
                 ; 0000 0054 dist /= 3;
000094 c037      	RJMP _0x2000002
                 ; 0000 0055 
                 ; 0000 0056 return dist;
                 ; 0000 0057 }
                 ; .FEND
                 ;int readHCS(){
                 ; 0000 0059 int readHCS(){
                 _readHCS:
                 ; .FSTART _readHCS
                 ; 0000 005A int n = 0;
                 ; 0000 005B PORTC.5 = 1;
000095 d0df      	RCALL SUBOPT_0x0
                 ;	n -> R16,R17
000096 9a45      	SBI  0x8,5
                 ; 0000 005C delay_us(10);
                +
000097 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
000098 958a     +DEC R24
000099 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 005D PORTC.5 = 0;
00009a 9845      	CBI  0x8,5
                 ; 0000 005E 
                 ; 0000 005F while(PINC.4 == 0)
                 _0x50:
00009b 9934      	SBIC 0x6,4
00009c c004      	RJMP _0x52
                 ; 0000 0060 delay_us(1);
                +
00009d e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
00009e 958a     +DEC R24
00009f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0000a0 cffa      	RJMP _0x50
                 _0x52:
                 ; 0000 0062 while(PINC.4 == 1){
                 _0x53:
0000a1 9b34      	SBIS 0x6,4
0000a2 c002      	RJMP _0x55
                 ; 0000 0063 n+=1;
0000a3 d0d6      	RCALL SUBOPT_0x1
                 ; 0000 0064 delay_us(1);
                 ; 0000 0065 }
0000a4 cffc      	RJMP _0x53
                 _0x55:
                 ; 0000 0066 
                 ; 0000 0067 n = (int)(float)n * 0.04 / 2;
0000a5 d0da      	RCALL SUBOPT_0x2
0000a6 c029      	RJMP _0x2000001
                 ; 0000 0068 
                 ; 0000 0069 return n;
                 ; 0000 006A }
                 ; .FEND
                 ;int getHCS(){
                 ; 0000 006C int getHCS(){
                 _getHCS:
                 ; .FSTART _getHCS
                 ; 0000 006D int dist = 0;
                 ; 0000 006E 
                 ; 0000 006F for(i = 0; i < 3; i++){
0000a7 d0cd      	RCALL SUBOPT_0x0
                 ;	dist -> R16,R17
0000a8 2444      	CLR  R4
                 _0x57:
0000a9 e0e3      	LDI  R30,LOW(3)
0000aa 164e      	CP   R4,R30
0000ab f420      	BRSH _0x58
                 ; 0000 0070 dist += readHCS();
0000ac dfe8      	RCALL _readHCS
0000ad d0ee      	RCALL SUBOPT_0x3
                 ; 0000 0071 delay_ms(10);
                 ; 0000 0072 }
0000ae 9443      	INC  R4
0000af cff9      	RJMP _0x57
                 _0x58:
                 ; 0000 0073 
                 ; 0000 0074 dist /= 3;
0000b0 c01b      	RJMP _0x2000002
                 ; 0000 0075 
                 ; 0000 0076 return dist;
                 ; 0000 0077 }
                 ; .FEND
                 ;int readHCD(){
                 ; 0000 007B int readHCD(){
                 _readHCD:
                 ; .FSTART _readHCD
                 ; 0000 007C int n = 0;
                 ; 0000 007D PORTC.3 = 1;
0000b1 d0c3      	RCALL SUBOPT_0x0
                 ;	n -> R16,R17
0000b2 9a43      	SBI  0x8,3
                 ; 0000 007E delay_us(10);
                +
0000b3 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0000b4 958a     +DEC R24
0000b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 007F PORTC.3 = 0;
0000b6 9843      	CBI  0x8,3
                 ; 0000 0080 
                 ; 0000 0081 while(PINC.2 == 0)
                 _0x5D:
0000b7 9932      	SBIC 0x6,2
0000b8 c004      	RJMP _0x5F
                 ; 0000 0082 delay_us(1);
                +
0000b9 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0000bc cffa      	RJMP _0x5D
                 _0x5F:
                 ; 0000 0084 while(PINC.2 == 1){
                 _0x60:
0000bd 9b32      	SBIS 0x6,2
0000be c002      	RJMP _0x62
                 ; 0000 0085 n+=1;
0000bf d0ba      	RCALL SUBOPT_0x1
                 ; 0000 0086 delay_us(1);
                 ; 0000 0087 }
0000c0 cffc      	RJMP _0x60
                 _0x62:
                 ; 0000 0088 
                 ; 0000 0089 n = (int)(float)n * 0.04 / 2;
0000c1 d0be      	RCALL SUBOPT_0x2
0000c2 c00d      	RJMP _0x2000001
                 ; 0000 008A 
                 ; 0000 008B return n;
                 ; 0000 008C }
                 ; .FEND
                 ;int getHCD(){
                 ; 0000 008E int getHCD(){
                 _getHCD:
                 ; .FSTART _getHCD
                 ; 0000 008F int dist = 0;
                 ; 0000 0090 
                 ; 0000 0091 for(i = 0; i < 3; i++){
0000c3 d0b1      	RCALL SUBOPT_0x0
                 ;	dist -> R16,R17
0000c4 2444      	CLR  R4
                 _0x64:
0000c5 e0e3      	LDI  R30,LOW(3)
0000c6 164e      	CP   R4,R30
0000c7 f420      	BRSH _0x65
                 ; 0000 0092 dist += readHCD();
0000c8 dfe8      	RCALL _readHCD
0000c9 d0d2      	RCALL SUBOPT_0x3
                 ; 0000 0093 delay_ms(10);
                 ; 0000 0094 }
0000ca 9443      	INC  R4
0000cb cff9      	RJMP _0x64
                 _0x65:
                 ; 0000 0095 
                 ; 0000 0096 dist /= 3;
                 _0x2000002:
0000cc 01d8      	MOVW R26,R16
0000cd e0e3      	LDI  R30,LOW(3)
0000ce e0f0      	LDI  R31,HIGH(3)
0000cf d0f0      	RCALL __DIVW21
                 _0x2000001:
0000d0 018f      	MOVW R16,R30
                 ; 0000 0097 
                 ; 0000 0098 return dist;
0000d1 9109      	LD   R16,Y+
0000d2 9119      	LD   R17,Y+
0000d3 9508      	RET
                 ; 0000 0099 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 00A4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A5 int f;
                 ; 0000 00A6 
                 ; 0000 00A7 // Declare your local variables here
                 ; 0000 00A8 
                 ; 0000 00A9 // Crystal Oscillator division factor: 1
                 ; 0000 00AA #pragma optsize-
                 ; 0000 00AB CLKPR=(1<<CLKPCE);
                 ;	f -> R16,R17
0000d4 e8e0      	LDI  R30,LOW(128)
0000d5 93e0 0061 	STS  97,R30
                 ; 0000 00AC CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 93e0 0061 	STS  97,R30
                 ; 0000 00AD #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00AE #pragma optsize+
                 ; 0000 00AF #endif
                 ; 0000 00B0 
                 ; 0000 00B1 // Input/Output Ports initialization
                 ; 0000 00B2 // Port A initialization
                 ; 0000 00B3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00B4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00B5 PORTA=0x00;
0000da b9e2      	OUT  0x2,R30
                 ; 0000 00B6 DDRA=0x00;
0000db b9e1      	OUT  0x1,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Port B initialization
                 ; 0000 00B9 PORTB=0x00;
0000dc b9e5      	OUT  0x5,R30
                 ; 0000 00BA DDRB=0b11111111;
0000dd efef      	LDI  R30,LOW(255)
0000de b9e4      	OUT  0x4,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Port C initialization
                 ; 0000 00BD PORTC=0b01010100;
0000df e5e4      	LDI  R30,LOW(84)
0000e0 b9e8      	OUT  0x8,R30
                 ; 0000 00BE DDRC=0b10101000;
0000e1 eae8      	LDI  R30,LOW(168)
0000e2 b9e7      	OUT  0x7,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Port D initialization
                 ; 0000 00C1 PORTD=0b00100000; // D.5 needs pull-up resistor
0000e3 e2e0      	LDI  R30,LOW(32)
0000e4 b9eb      	OUT  0xB,R30
                 ; 0000 00C2 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
0000e5 e5e0      	LDI  R30,LOW(80)
0000e6 b9ea      	OUT  0xA,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer/Counter 0 initialization
                 ; 0000 00C5 // Clock source: System Clock
                 ; 0000 00C6 // Clock value: Timer 0 Stopped
                 ; 0000 00C7 // Mode: Normal top=0xFF
                 ; 0000 00C8 // OC0A output: Disconnected
                 ; 0000 00C9 // OC0B output: Disconnected
                 ; 0000 00CA TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 bde4      	OUT  0x24,R30
                 ; 0000 00CB TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e9 bde5      	OUT  0x25,R30
                 ; 0000 00CC TCNT0=0x00;
0000ea bde6      	OUT  0x26,R30
                 ; 0000 00CD OCR0A=0x00;
0000eb bde7      	OUT  0x27,R30
                 ; 0000 00CE OCR0B=0x00;
0000ec bde8      	OUT  0x28,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // Timer/Counter 1 initialization
                 ; 0000 00D1 // Clock source: System Clock
                 ; 0000 00D2 // Clock value: Timer1 Stopped
                 ; 0000 00D3 // Mode: Normal top=0xFFFF
                 ; 0000 00D4 // OC1A output: Disconnected
                 ; 0000 00D5 // OC1B output: Disconnected
                 ; 0000 00D6 // Noise Canceler: Off
                 ; 0000 00D7 // Input Capture on Falling Edge
                 ; 0000 00D8 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D9 // Input Capture Interrupt: Off
                 ; 0000 00DA // Compare A Match Interrupt: Off
                 ; 0000 00DB // Compare B Match Interrupt: Off
                 ; 0000 00DC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ed 93e0 0080 	STS  128,R30
                 ; 0000 00DD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000ef 93e0 0081 	STS  129,R30
                 ; 0000 00DE TCNT1H=0x00;
0000f1 93e0 0085 	STS  133,R30
                 ; 0000 00DF TCNT1L=0x00;
0000f3 93e0 0084 	STS  132,R30
                 ; 0000 00E0 ICR1H=0x00;
0000f5 93e0 0087 	STS  135,R30
                 ; 0000 00E1 ICR1L=0x00;
0000f7 93e0 0086 	STS  134,R30
                 ; 0000 00E2 OCR1AH=0x00;
0000f9 93e0 0089 	STS  137,R30
                 ; 0000 00E3 OCR1AL=0x00;
0000fb 93e0 0088 	STS  136,R30
                 ; 0000 00E4 OCR1BH=0x00;
0000fd 93e0 008b 	STS  139,R30
                 ; 0000 00E5 OCR1BL=0x00;
0000ff 93e0 008a 	STS  138,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // Timer/Counter 2 initialization
                 ; 0000 00E8 // Clock source: System Clock
                 ; 0000 00E9 // Clock value: Timer2 Stopped
                 ; 0000 00EA // Mode: Normal top=0xFF
                 ; 0000 00EB // OC2A output: Disconnected
                 ; 0000 00EC // OC2B output: Disconnected
                 ; 0000 00ED ASSR=(0<<EXCLK) | (0<<AS2);
000101 93e0 00b6 	STS  182,R30
                 ; 0000 00EE TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000103 93e0 00b0 	STS  176,R30
                 ; 0000 00EF TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000105 93e0 00b1 	STS  177,R30
                 ; 0000 00F0 TCNT2=0x00;
000107 93e0 00b2 	STS  178,R30
                 ; 0000 00F1 OCR2A=0x00;
000109 93e0 00b3 	STS  179,R30
                 ; 0000 00F2 OCR2B=0x00;
00010b 93e0 00b4 	STS  180,R30
                 ; 0000 00F3 
                 ; 0000 00F4 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00F5 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00010d 93e0 006e 	STS  110,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00F8 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00010f 93e0 006f 	STS  111,R30
                 ; 0000 00F9 
                 ; 0000 00FA // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00FB TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000111 93e0 0070 	STS  112,R30
                 ; 0000 00FC 
                 ; 0000 00FD // External Interrupt(s) initialization
                 ; 0000 00FE // INT0: Off
                 ; 0000 00FF // INT1: Off
                 ; 0000 0100 // INT2: Off
                 ; 0000 0101 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0102 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 0103 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0104 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 0105 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000113 93e0 0069 	STS  105,R30
                 ; 0000 0106 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
000115 bbed      	OUT  0x1D,R30
                 ; 0000 0107 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000116 93e0 0068 	STS  104,R30
                 ; 0000 0108 
                 ; 0000 0109 // USART0 initialization
                 ; 0000 010A // USART0 disabled
                 ; 0000 010B UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000118 93e0 00c1 	STS  193,R30
                 ; 0000 010C 
                 ; 0000 010D // USART1 initialization
                 ; 0000 010E // USART1 disabled
                 ; 0000 010F UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00011a 93e0 00c9 	STS  201,R30
                 ; 0000 0110 
                 ; 0000 0111 // Analog Comparator initialization
                 ; 0000 0112 // Analog Comparator: Off
                 ; 0000 0113 // The Analog Comparator's positive input is
                 ; 0000 0114 // connected to the AIN0 pin
                 ; 0000 0115 // The Analog Comparator's negative input is
                 ; 0000 0116 // connected to the AIN1 pin
                 ; 0000 0117 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00011c e8e0      	LDI  R30,LOW(128)
00011d bfe0      	OUT  0x30,R30
                 ; 0000 0118 ADCSRB=(0<<ACME);
00011e e0e0      	LDI  R30,LOW(0)
00011f 93e0 007b 	STS  123,R30
                 ; 0000 0119 // Digital input buffer on AIN0: On
                 ; 0000 011A // Digital input buffer on AIN1: On
                 ; 0000 011B DIDR1=(0<<AIN0D) | (0<<AIN1D);
000121 93e0 007f 	STS  127,R30
                 ; 0000 011C 
                 ; 0000 011D // ADC initialization
                 ; 0000 011E // ADC disabled
                 ; 0000 011F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000123 93e0 007a 	STS  122,R30
                 ; 0000 0120 
                 ; 0000 0121 // SPI initialization
                 ; 0000 0122 // SPI disabled
                 ; 0000 0123 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000125 bdec      	OUT  0x2C,R30
                 ; 0000 0124 
                 ; 0000 0125 // TWI initialization
                 ; 0000 0126 // TWI disabled
                 ; 0000 0127 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000126 93e0 00bc 	STS  188,R30
                 ; 0000 0128 
                 ; 0000 0129 
                 ; 0000 012A PORTD.6 = 1;
000128 9a5e      	SBI  0xB,6
                 ; 0000 012B 
                 ; 0000 012C Stop();
000129 df48      	RCALL _Stop
                 ; 0000 012D 
                 ; 0000 012E delay_ms(1000);
00012a eea8      	LDI  R26,LOW(1000)
00012b e0b3      	LDI  R27,HIGH(1000)
00012c d1cb      	RCALL _delay_ms
                 ; 0000 012F 
                 ; 0000 0130 
                 ; 0000 0131 
                 ; 0000 0132 while (1){
                 _0x68:
                 ; 0000 0133 int face, right, left;
                 ; 0000 0134 
                 ; 0000 0135 
                 ; 0000 0136 face = getHCF();
00012d 9726      	SBIW R28,6
                 ;	face -> Y+4
                 ;	right -> Y+2
                 ;	left -> Y+0
00012e df5c      	RCALL _getHCF
00012f 83ec      	STD  Y+4,R30
000130 83fd      	STD  Y+4+1,R31
                 ; 0000 0137 
                 ; 0000 0138 right = getHCD();
000131 df91      	RCALL _getHCD
000132 83ea      	STD  Y+2,R30
000133 83fb      	STD  Y+2+1,R31
                 ; 0000 0139 left = getHCS();
000134 df72      	RCALL _getHCS
000135 83e8      	ST   Y,R30
000136 83f9      	STD  Y+1,R31
                 ; 0000 013A 
                 ; 0000 013B 
                 ; 0000 013C 
                 ; 0000 013D 
                 ; 0000 013E if( face < 20){
000137 81ac      	LDD  R26,Y+4
000138 81bd      	LDD  R27,Y+4+1
000139 9754      	SBIW R26,20
00013a f48c      	BRGE _0x6B
                 ; 0000 013F mooveBackward();
00013b df25      	RCALL _mooveBackward
                 ; 0000 0140 delay_ms(300);
00013c e2ac      	LDI  R26,LOW(300)
00013d e0b1      	LDI  R27,HIGH(300)
00013e d1b9      	RCALL _delay_ms
                 ; 0000 0141 
                 ; 0000 0142 if(left < right)
00013f 81ea      	LDD  R30,Y+2
000140 81fb      	LDD  R31,Y+2+1
000141 81a8      	LD   R26,Y
000142 81b9      	LDD  R27,Y+1
000143 17ae      	CP   R26,R30
000144 07bf      	CPC  R27,R31
000145 f414      	BRGE _0x6C
                 ; 0000 0143 mooveRight();
000146 df24      	RCALL _mooveRight
                 ; 0000 0144 else
000147 c001      	RJMP _0x6D
                 _0x6C:
                 ; 0000 0145 mooveLeft();
000148 df1c      	RCALL _mooveLeft
                 ; 0000 0146 delay_ms(300);
                 _0x6D:
000149 e2ac      	LDI  R26,LOW(300)
00014a e0b1      	LDI  R27,HIGH(300)
00014b c025      	RJMP _0x78
                 ; 0000 0147 
                 ; 0000 0148 }
                 ; 0000 0149 else if(left - right > 5 && left < 30){
                 _0x6B:
00014c 81aa      	LDD  R26,Y+2
00014d 81bb      	LDD  R27,Y+2+1
00014e 81e8      	LD   R30,Y
00014f 81f9      	LDD  R31,Y+1
000150 1bea      	SUB  R30,R26
000151 0bfb      	SBC  R31,R27
000152 9736      	SBIW R30,6
000153 f024      	BRLT _0x70
000154 81a8      	LD   R26,Y
000155 81b9      	LDD  R27,Y+1
000156 975e      	SBIW R26,30
000157 f00c      	BRLT _0x71
                 _0x70:
000158 c004      	RJMP _0x6F
                 _0x71:
                 ; 0000 014A mooveRight();
000159 df11      	RCALL _mooveRight
                 ; 0000 014B 
                 ; 0000 014C delay_ms(300);
00015a e2ac      	LDI  R26,LOW(300)
00015b e0b1      	LDI  R27,HIGH(300)
00015c c014      	RJMP _0x78
                 ; 0000 014D }
                 ; 0000 014E else if(right - left > 5 && right < 30){
                 _0x6F:
00015d 81a8      	LD   R26,Y
00015e 81b9      	LDD  R27,Y+1
00015f 81ea      	LDD  R30,Y+2
000160 81fb      	LDD  R31,Y+2+1
000161 1bea      	SUB  R30,R26
000162 0bfb      	SBC  R31,R27
000163 9736      	SBIW R30,6
000164 f024      	BRLT _0x74
000165 81aa      	LDD  R26,Y+2
000166 81bb      	LDD  R27,Y+2+1
000167 975e      	SBIW R26,30
000168 f00c      	BRLT _0x75
                 _0x74:
000169 c004      	RJMP _0x73
                 _0x75:
                 ; 0000 014F mooveLeft();
00016a defa      	RCALL _mooveLeft
                 ; 0000 0150 
                 ; 0000 0151 delay_ms(300);
00016b e2ac      	LDI  R26,LOW(300)
00016c e0b1      	LDI  R27,HIGH(300)
00016d c003      	RJMP _0x78
                 ; 0000 0152 }
                 ; 0000 0153 
                 ; 0000 0154 else{
                 _0x73:
                 ; 0000 0155 mooveForward();
00016e deec      	RCALL _mooveForward
                 ; 0000 0156 
                 ; 0000 0157 delay_ms(100);
00016f e6a4      	LDI  R26,LOW(100)
000170 e0b0      	LDI  R27,0
                 _0x78:
000171 d186      	RCALL _delay_ms
                 ; 0000 0158 
                 ; 0000 0159 //merge in fata
                 ; 0000 015A }
                 ; 0000 015B 
                 ; 0000 015C }
000172 9626      	ADIW R28,6
000173 cfb9      	RJMP _0x68
                 ; 0000 015D }
                 _0x77:
000174 cfff      	RJMP _0x77
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000175 931a      	ST   -Y,R17
000176 930a      	ST   -Y,R16
                +
000177 e000     +LDI R16 , LOW ( 0 )
000178 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000179 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
                +
00017a 5f0f     +SUBI R16 , LOW ( - 1 )
00017b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
00017c e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
00017d 958a     +DEC R24
00017e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
00017f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:54 WORDS
                 SUBOPT_0x2:
000180 01f8      	MOVW R30,R16
                +
000181 2f6f     +MOV R22 , R31
000182 0f66     +ADD R22 , R22
000183 0b66     +SBC R22 , R22
000184 2f76     +MOV R23 , R22
                 	__CWD1
000185 d0b3      	RCALL __CDF1
000186 d07b      	RCALL __CFD1
000187 2766      	CLR  R22
000188 2777      	CLR  R23
                +
000189 2f6f     +MOV R22 , R31
00018a 0f66     +ADD R22 , R22
00018b 0b66     +SBC R22 , R22
00018c 2f76     +MOV R23 , R22
                 	__CWD1
00018d d0ab      	RCALL __CDF1
                +
00018e e0aa     +LDI R26 , LOW ( 0x3D23D70A )
00018f edb7     +LDI R27 , HIGH ( 0x3D23D70A )
000190 e283     +LDI R24 , BYTE3 ( 0x3D23D70A )
000191 e39d     +LDI R25 , BYTE4 ( 0x3D23D70A )
                 	__GETD2N 0x3D23D70A
000192 d0d3      	RCALL __MULF12
000193 01df      	MOVW R26,R30
000194 01cb      	MOVW R24,R22
                +
000195 e0e0     +LDI R30 , LOW ( 0x40000000 )
000196 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000197 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000198 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000199 d11a      	RCALL __DIVF21
00019a d067      	RCALL __CFD1
00019b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
                +
00019c 0f0e     +ADD R16 , R30
00019d 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00019e e0aa      	LDI  R26,LOW(10)
00019f e0b0      	LDI  R27,0
0001a0 c157      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
0001a1 95f1      	NEG  R31
0001a2 95e1      	NEG  R30
0001a3 40f0      	SBCI R31,0
0001a4 9508      	RET
                 
                 __ANEGD1:
0001a5 95f0      	COM  R31
0001a6 9560      	COM  R22
0001a7 9570      	COM  R23
0001a8 95e1      	NEG  R30
0001a9 4fff      	SBCI R31,-1
0001aa 4f6f      	SBCI R22,-1
0001ab 4f7f      	SBCI R23,-1
0001ac 9508      	RET
                 
                 __DIVW21U:
0001ad 2400      	CLR  R0
0001ae 2411      	CLR  R1
0001af e190      	LDI  R25,16
                 __DIVW21U1:
0001b0 0faa      	LSL  R26
0001b1 1fbb      	ROL  R27
0001b2 1c00      	ROL  R0
0001b3 1c11      	ROL  R1
0001b4 1a0e      	SUB  R0,R30
0001b5 0a1f      	SBC  R1,R31
0001b6 f418      	BRCC __DIVW21U2
0001b7 0e0e      	ADD  R0,R30
0001b8 1e1f      	ADC  R1,R31
0001b9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ba 60a1      	SBR  R26,1
                 __DIVW21U3:
0001bb 959a      	DEC  R25
0001bc f799      	BRNE __DIVW21U1
0001bd 01fd      	MOVW R30,R26
0001be 01d0      	MOVW R26,R0
0001bf 9508      	RET
                 
                 __DIVW21:
0001c0 d004      	RCALL __CHKSIGNW
0001c1 dfeb      	RCALL __DIVW21U
0001c2 f40e      	BRTC __DIVW211
0001c3 dfdd      	RCALL __ANEGW1
                 __DIVW211:
0001c4 9508      	RET
                 
                 __CHKSIGNW:
0001c5 94e8      	CLT
0001c6 fff7      	SBRS R31,7
0001c7 c002      	RJMP __CHKSW1
0001c8 dfd8      	RCALL __ANEGW1
0001c9 9468      	SET
                 __CHKSW1:
0001ca ffb7      	SBRS R27,7
0001cb c006      	RJMP __CHKSW2
0001cc 95b1      	NEG  R27
0001cd 95a1      	NEG  R26
0001ce 40b0      	SBCI R27,0
0001cf f800      	BLD  R0,0
0001d0 9403      	INC  R0
0001d1 fa00      	BST  R0,0
                 __CHKSW2:
0001d2 9508      	RET
                 
                 __ROUND_REPACK:
0001d3 2355      	TST  R21
0001d4 f442      	BRPL __REPACK
0001d5 3850      	CPI  R21,0x80
0001d6 f411      	BRNE __ROUND_REPACK0
0001d7 ffe0      	SBRS R30,0
0001d8 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001d9 9631      	ADIW R30,1
0001da 1f69      	ADC  R22,R25
0001db 1f79      	ADC  R23,R25
0001dc f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001dd e850      	LDI  R21,0x80
0001de 2757      	EOR  R21,R23
0001df f411      	BRNE __REPACK0
0001e0 935f      	PUSH R21
0001e1 c073      	RJMP __ZERORES
                 __REPACK0:
0001e2 3f5f      	CPI  R21,0xFF
0001e3 f031      	BREQ __REPACK1
0001e4 0f66      	LSL  R22
0001e5 0c00      	LSL  R0
0001e6 9557      	ROR  R21
0001e7 9567      	ROR  R22
0001e8 2f75      	MOV  R23,R21
0001e9 9508      	RET
                 __REPACK1:
0001ea 935f      	PUSH R21
0001eb 2000      	TST  R0
0001ec f00a      	BRMI __REPACK2
0001ed c072      	RJMP __MAXRES
                 __REPACK2:
0001ee c06b      	RJMP __MINRES
                 
                 __UNPACK:
0001ef e850      	LDI  R21,0x80
0001f0 2e19      	MOV  R1,R25
0001f1 2215      	AND  R1,R21
0001f2 0f88      	LSL  R24
0001f3 1f99      	ROL  R25
0001f4 2795      	EOR  R25,R21
0001f5 0f55      	LSL  R21
0001f6 9587      	ROR  R24
                 
                 __UNPACK1:
0001f7 e850      	LDI  R21,0x80
0001f8 2e07      	MOV  R0,R23
0001f9 2205      	AND  R0,R21
0001fa 0f66      	LSL  R22
0001fb 1f77      	ROL  R23
0001fc 2775      	EOR  R23,R21
0001fd 0f55      	LSL  R21
0001fe 9567      	ROR  R22
0001ff 9508      	RET
                 
                 __CFD1U:
000200 9468      	SET
000201 c001      	RJMP __CFD1U0
                 __CFD1:
000202 94e8      	CLT
                 __CFD1U0:
000203 935f      	PUSH R21
000204 dff2      	RCALL __UNPACK1
000205 3870      	CPI  R23,0x80
000206 f018      	BRLO __CFD10
000207 3f7f      	CPI  R23,0xFF
000208 f408      	BRCC __CFD10
000209 c04b      	RJMP __ZERORES
                 __CFD10:
00020a e156      	LDI  R21,22
00020b 1b57      	SUB  R21,R23
00020c f4aa      	BRPL __CFD11
00020d 9551      	NEG  R21
00020e 3058      	CPI  R21,8
00020f f40e      	BRTC __CFD19
000210 3059      	CPI  R21,9
                 __CFD19:
000211 f030      	BRLO __CFD17
000212 efef      	SER  R30
000213 efff      	SER  R31
000214 ef6f      	SER  R22
000215 e77f      	LDI  R23,0x7F
000216 f977      	BLD  R23,7
000217 c01a      	RJMP __CFD15
                 __CFD17:
000218 2777      	CLR  R23
000219 2355      	TST  R21
00021a f0b9      	BREQ __CFD15
                 __CFD18:
00021b 0fee      	LSL  R30
00021c 1fff      	ROL  R31
00021d 1f66      	ROL  R22
00021e 1f77      	ROL  R23
00021f 955a      	DEC  R21
000220 f7d1      	BRNE __CFD18
000221 c010      	RJMP __CFD15
                 __CFD11:
000222 2777      	CLR  R23
                 __CFD12:
000223 3058      	CPI  R21,8
000224 f028      	BRLO __CFD13
000225 2fef      	MOV  R30,R31
000226 2ff6      	MOV  R31,R22
000227 2f67      	MOV  R22,R23
000228 5058      	SUBI R21,8
000229 cff9      	RJMP __CFD12
                 __CFD13:
00022a 2355      	TST  R21
00022b f031      	BREQ __CFD15
                 __CFD14:
00022c 9576      	LSR  R23
00022d 9567      	ROR  R22
00022e 95f7      	ROR  R31
00022f 95e7      	ROR  R30
000230 955a      	DEC  R21
000231 f7d1      	BRNE __CFD14
                 __CFD15:
000232 2000      	TST  R0
000233 f40a      	BRPL __CFD16
000234 df70      	RCALL __ANEGD1
                 __CFD16:
000235 915f      	POP  R21
000236 9508      	RET
                 
                 __CDF1U:
000237 9468      	SET
000238 c001      	RJMP __CDF1U0
                 __CDF1:
000239 94e8      	CLT
                 __CDF1U0:
00023a 9730      	SBIW R30,0
00023b 4060      	SBCI R22,0
00023c 4070      	SBCI R23,0
00023d f0b1      	BREQ __CDF10
00023e 2400      	CLR  R0
00023f f026      	BRTS __CDF11
000240 2377      	TST  R23
000241 f412      	BRPL __CDF11
000242 9400      	COM  R0
000243 df61      	RCALL __ANEGD1
                 __CDF11:
000244 2e17      	MOV  R1,R23
000245 e17e      	LDI  R23,30
000246 2011      	TST  R1
                 __CDF12:
000247 f032      	BRMI __CDF13
000248 957a      	DEC  R23
000249 0fee      	LSL  R30
00024a 1fff      	ROL  R31
00024b 1f66      	ROL  R22
00024c 1c11      	ROL  R1
00024d cff9      	RJMP __CDF12
                 __CDF13:
00024e 2fef      	MOV  R30,R31
00024f 2ff6      	MOV  R31,R22
000250 2d61      	MOV  R22,R1
000251 935f      	PUSH R21
000252 df8a      	RCALL __REPACK
000253 915f      	POP  R21
                 __CDF10:
000254 9508      	RET
                 
                 __ZERORES:
000255 27ee      	CLR  R30
000256 27ff      	CLR  R31
000257 01bf      	MOVW R22,R30
000258 915f      	POP  R21
000259 9508      	RET
                 
                 __MINRES:
00025a efef      	SER  R30
00025b efff      	SER  R31
00025c e76f      	LDI  R22,0x7F
00025d ef7f      	SER  R23
00025e 915f      	POP  R21
00025f 9508      	RET
                 
                 __MAXRES:
000260 efef      	SER  R30
000261 efff      	SER  R31
000262 e76f      	LDI  R22,0x7F
000263 e77f      	LDI  R23,0x7F
000264 915f      	POP  R21
000265 9508      	RET
                 
                 __MULF12:
000266 935f      	PUSH R21
000267 df87      	RCALL __UNPACK
000268 3870      	CPI  R23,0x80
000269 f359      	BREQ __ZERORES
00026a 3890      	CPI  R25,0x80
00026b f349      	BREQ __ZERORES
00026c 2401      	EOR  R0,R1
00026d 9408      	SEC
00026e 1f79      	ADC  R23,R25
00026f f423      	BRVC __MULF124
000270 f324      	BRLT __ZERORES
                 __MULF125:
000271 2000      	TST  R0
000272 f33a      	BRMI __MINRES
000273 cfec      	RJMP __MAXRES
                 __MULF124:
000274 920f      	PUSH R0
000275 931f      	PUSH R17
000276 932f      	PUSH R18
000277 933f      	PUSH R19
000278 934f      	PUSH R20
000279 2711      	CLR  R17
00027a 2722      	CLR  R18
00027b 2799      	CLR  R25
00027c 9f68      	MUL  R22,R24
00027d 01a0      	MOVW R20,R0
00027e 9f8f      	MUL  R24,R31
00027f 2d30      	MOV  R19,R0
000280 0d41      	ADD  R20,R1
000281 1f59      	ADC  R21,R25
000282 9f6b      	MUL  R22,R27
000283 0d30      	ADD  R19,R0
000284 1d41      	ADC  R20,R1
000285 1f59      	ADC  R21,R25
000286 9f8e      	MUL  R24,R30
000287 d027      	RCALL __MULF126
000288 9fbf      	MUL  R27,R31
000289 d025      	RCALL __MULF126
00028a 9f6a      	MUL  R22,R26
00028b d023      	RCALL __MULF126
00028c 9fbe      	MUL  R27,R30
00028d d01d      	RCALL __MULF127
00028e 9faf      	MUL  R26,R31
00028f d01b      	RCALL __MULF127
000290 9fae      	MUL  R26,R30
000291 0d11      	ADD  R17,R1
000292 1f29      	ADC  R18,R25
000293 1f39      	ADC  R19,R25
000294 1f49      	ADC  R20,R25
000295 1f59      	ADC  R21,R25
000296 2fe3      	MOV  R30,R19
000297 2ff4      	MOV  R31,R20
000298 2f65      	MOV  R22,R21
000299 2f52      	MOV  R21,R18
00029a 914f      	POP  R20
00029b 913f      	POP  R19
00029c 912f      	POP  R18
00029d 911f      	POP  R17
00029e 900f      	POP  R0
00029f 2366      	TST  R22
0002a0 f02a      	BRMI __MULF122
0002a1 0f55      	LSL  R21
0002a2 1fee      	ROL  R30
0002a3 1fff      	ROL  R31
0002a4 1f66      	ROL  R22
0002a5 c002      	RJMP __MULF123
                 __MULF122:
0002a6 9573      	INC  R23
0002a7 f24b      	BRVS __MULF125
                 __MULF123:
0002a8 df2a      	RCALL __ROUND_REPACK
0002a9 915f      	POP  R21
0002aa 9508      	RET
                 
                 __MULF127:
0002ab 0d10      	ADD  R17,R0
0002ac 1d21      	ADC  R18,R1
0002ad 1f39      	ADC  R19,R25
0002ae c002      	RJMP __MULF128
                 __MULF126:
0002af 0d20      	ADD  R18,R0
0002b0 1d31      	ADC  R19,R1
                 __MULF128:
0002b1 1f49      	ADC  R20,R25
0002b2 1f59      	ADC  R21,R25
0002b3 9508      	RET
                 
                 __DIVF21:
0002b4 935f      	PUSH R21
0002b5 df39      	RCALL __UNPACK
0002b6 3870      	CPI  R23,0x80
0002b7 f421      	BRNE __DIVF210
0002b8 2011      	TST  R1
                 __DIVF211:
0002b9 f40a      	BRPL __DIVF219
0002ba cf9f      	RJMP __MINRES
                 __DIVF219:
0002bb cfa4      	RJMP __MAXRES
                 __DIVF210:
0002bc 3890      	CPI  R25,0x80
0002bd f409      	BRNE __DIVF218
                 __DIVF217:
0002be cf96      	RJMP __ZERORES
                 __DIVF218:
0002bf 2401      	EOR  R0,R1
0002c0 9408      	SEC
0002c1 0b97      	SBC  R25,R23
0002c2 f41b      	BRVC __DIVF216
0002c3 f3d4      	BRLT __DIVF217
0002c4 2000      	TST  R0
0002c5 cff3      	RJMP __DIVF211
                 __DIVF216:
0002c6 2f79      	MOV  R23,R25
0002c7 931f      	PUSH R17
0002c8 932f      	PUSH R18
0002c9 933f      	PUSH R19
0002ca 934f      	PUSH R20
0002cb 2411      	CLR  R1
0002cc 2711      	CLR  R17
0002cd 2722      	CLR  R18
0002ce 2733      	CLR  R19
0002cf 01a9      	MOVW R20,R18
0002d0 e290      	LDI  R25,32
                 __DIVF212:
0002d1 17ae      	CP   R26,R30
0002d2 07bf      	CPC  R27,R31
0002d3 0786      	CPC  R24,R22
0002d4 0741      	CPC  R20,R17
0002d5 f030      	BRLO __DIVF213
0002d6 1bae      	SUB  R26,R30
0002d7 0bbf      	SBC  R27,R31
0002d8 0b86      	SBC  R24,R22
0002d9 0b41      	SBC  R20,R17
0002da 9408      	SEC
0002db c001      	RJMP __DIVF214
                 __DIVF213:
0002dc 9488      	CLC
                 __DIVF214:
0002dd 1f55      	ROL  R21
0002de 1f22      	ROL  R18
0002df 1f33      	ROL  R19
0002e0 1c11      	ROL  R1
0002e1 1faa      	ROL  R26
0002e2 1fbb      	ROL  R27
0002e3 1f88      	ROL  R24
0002e4 1f44      	ROL  R20
0002e5 959a      	DEC  R25
0002e6 f751      	BRNE __DIVF212
0002e7 01f9      	MOVW R30,R18
0002e8 2d61      	MOV  R22,R1
0002e9 914f      	POP  R20
0002ea 913f      	POP  R19
0002eb 912f      	POP  R18
0002ec 911f      	POP  R17
0002ed 2366      	TST  R22
0002ee f032      	BRMI __DIVF215
0002ef 0f55      	LSL  R21
0002f0 1fee      	ROL  R30
0002f1 1fff      	ROL  R31
0002f2 1f66      	ROL  R22
0002f3 957a      	DEC  R23
0002f4 f24b      	BRVS __DIVF217
                 __DIVF215:
0002f5 dedd      	RCALL __ROUND_REPACK
0002f6 915f      	POP  R21
0002f7 9508      	RET
                 
                 _delay_ms:
0002f8 9610      	adiw r26,0
0002f9 f039      	breq __delay_ms1
                 __delay_ms0:
0002fa 95a8      	wdr
                +
0002fb e888     +LDI R24 , LOW ( 0x1388 )
0002fc e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
0002fd 9701     +SBIW R24 , 1
0002fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0002ff 9711      	sbiw r26,1
000300 f7c9      	brne __delay_ms0
                 __delay_ms1:
000301 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  26 r1 :  21 r2 :   0 r3 :   0 r4 :   9 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  15 r18:  13 r19:  12 r20:  14 r21:  48 r22:  45 r23:  36 
r24:  30 r25:  27 r26:  37 r27:  29 r28:   3 r29:   1 r30: 116 r31:  42 
x  :   2 y  :  28 z  :   0 
Registers used: 21 out of 35 (60.0%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   9 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   7 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   6 brmi  :   5 brne  :  19 brpl  :   5 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :  14 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   4 cpi   :  11 cpse  :   0 dec   :  14 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   5 jmp   :  32 ld    :   6 ldd   :  14 ldi   :  71 
lds   :   0 lpm   :   0 lsl   :  11 lsr   :   1 mov   :  21 movw  :  11 
mul   :   9 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   0 
ori   :   0 out   :  22 pop   :  16 push  :  15 rcall :  55 ret   :  22 
reti  :   0 rjmp  :  54 rol   :  25 ror   :   7 sbc   :   9 sbci  :   8 
sbi   :  18 sbic  :   3 sbis  :   3 sbiw  :  10 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   5 std   :   5 sts   :  29 sub   :   5 subi  :   2 swap  :   0 
tst   :  12 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000604   1540      0   1540   16384   9.4%
[.dseg] 0x000100 0x000200      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
