;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void mooveForward(){
; 0000 000A void mooveForward(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B PORTB.0 = 1; //en1&2
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000C PORTB.1 = 1; //i1
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000D PORTB.2 = 0; //i2
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000E PORTB.3 = 1; //en2&3
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000F PORTB.4 = 1; //i3
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0010 PORTB.5 = 0; //i4
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0011 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;void mooveBackward(){
; 0000 0013 void mooveBackward(){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0014 PORTB.0 = 1; //en1&2
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0015 PORTB.1 = 0; //i1
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0016 PORTB.2 = 1; //i2
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0017 PORTB.3 = 1; //en2&3
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0018 PORTB.4 = 0; //i3
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0019 PORTB.5 = 1; //i4
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001A }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;void mooveLeft(){
; 0000 001C void mooveLeft(){
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001D PORTB.0 = 1; //en1&2
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001E PORTB.1 = 0; //i1
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001F PORTB.2 = 1; //i2
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0020 PORTB.3 = 1; //en2&3
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0021 PORTB.4 = 1; //i3
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022 PORTB.5 = 0; //i4
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0023 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;void mooveRight(){
; 0000 0025 void mooveRight(){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0026 PORTB.0 = 1; //en1&2
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0027 PORTB.1 = 1; //i1
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0028 PORTB.2 = 0; //i2
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0029 PORTB.3 = 1; //en2&3
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002A PORTB.4 = 0; //i3
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 002B PORTB.5 = 1; //i4
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002C }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;void Stop(){
; 0000 002E void Stop(){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002F PORTB.0 = 0; //en1&2
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0030 PORTB.1 = 0; //i1
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0031 PORTB.2 = 0; //i2
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0032 PORTB.3 = 0; //en2&3
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0033 PORTB.4 = 0; //i3
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0034 PORTB.5 = 0; //i4
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0035 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;int readHCF(){
; 0000 0037 int readHCF(){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0038 int n = 0;
; 0000 0039 PORTC.7 = 1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;	n -> R16,R17
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003A delay_us(10);
;PCODE: $00000065 VOL: 0
; 0000 003B PORTC.7 = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003C 
; 0000 003D while(PINC.6 == 0)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003E delay_us(1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0040 while(PINC.6 == 1){
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0041 n+=1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0042 delay_us(1);
;PCODE: $00000075 VOL: 0
; 0000 0043 
; 0000 0044 
; 0000 0045 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0046 
; 0000 0047 n = (int)(float)n * 0.04 / 2;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0048 
; 0000 0049 return n;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004A }
;PCODE: $00000087 VOL: 0
;int getHCF(){
; 0000 004C int getHCF(){
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004D int dist = 0;
; 0000 004E 
; 0000 004F for(i = 0; i < 3; i++){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	dist -> R16,R17
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0050 dist += readHCF();
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0051 delay_ms(10);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0052 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0053 
; 0000 0054 dist /= 3;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0055 
; 0000 0056 return dist;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0057 }
;PCODE: $000000A6 VOL: 0
;int readHCS(){
; 0000 0059 int readHCS(){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005A int n = 0;
; 0000 005B PORTC.5 = 1;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;	n -> R16,R17
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005C delay_us(10);
;PCODE: $000000AF VOL: 0
; 0000 005D PORTC.5 = 0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005E 
; 0000 005F while(PINC.4 == 0)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0060 delay_us(1);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0062 while(PINC.4 == 1){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0063 n+=1;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0064 delay_us(1);
;PCODE: $000000BF VOL: 0
; 0000 0065 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0066 
; 0000 0067 n = (int)(float)n * 0.04 / 2;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0068 
; 0000 0069 return n;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 006A }
;PCODE: $000000D1 VOL: 0
;int getHCS(){
; 0000 006C int getHCS(){
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 006D int dist = 0;
; 0000 006E 
; 0000 006F for(i = 0; i < 3; i++){
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;	dist -> R16,R17
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0070 dist += readHCS();
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0071 delay_ms(10);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0072 }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0073 
; 0000 0074 dist /= 3;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0075 
; 0000 0076 return dist;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0077 }
;PCODE: $000000F0 VOL: 0
;int readHCD(){
; 0000 007B int readHCD(){
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 007C int n = 0;
; 0000 007D PORTC.3 = 1;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;	n -> R16,R17
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 007E delay_us(10);
;PCODE: $000000F9 VOL: 0
; 0000 007F PORTC.3 = 0;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0080 
; 0000 0081 while(PINC.2 == 0)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0082 delay_us(1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0084 while(PINC.2 == 1){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0085 n+=1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0086 delay_us(1);
;PCODE: $00000109 VOL: 0
; 0000 0087 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0088 
; 0000 0089 n = (int)(float)n * 0.04 / 2;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 008A 
; 0000 008B return n;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 008C }
;PCODE: $0000011B VOL: 0
;int getHCD(){
; 0000 008E int getHCD(){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 008F int dist = 0;
; 0000 0090 
; 0000 0091 for(i = 0; i < 3; i++){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;	dist -> R16,R17
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0092 dist += readHCD();
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0093 delay_ms(10);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0094 }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0095 
; 0000 0096 dist /= 3;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0097 
; 0000 0098 return dist;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0099 }
;PCODE: $0000013A VOL: 0
;void main(void)
; 0000 00A4 {
;PCODE: $0000013B VOL: 0
; 0000 00A5 int f;
; 0000 00A6 
; 0000 00A7 // Declare your local variables here
; 0000 00A8 
; 0000 00A9 // Crystal Oscillator division factor: 1
; 0000 00AA #pragma optsize-
; 0000 00AB CLKPR=(1<<CLKPCE);
;	f -> R16,R17
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00AC CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AD #ifdef _OPTIMIZE_SIZE_
; 0000 00AE #pragma optsize+
; 0000 00AF #endif
; 0000 00B0 
; 0000 00B1 // Input/Output Ports initialization
; 0000 00B2 // Port A initialization
; 0000 00B3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B5 PORTA=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00B6 DDRA=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00B7 
; 0000 00B8 // Port B initialization
; 0000 00B9 PORTB=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00BA DDRB=0b11111111;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00BB 
; 0000 00BC // Port C initialization
; 0000 00BD PORTC=0b01010100;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00BE DDRC=0b10101000;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00BF 
; 0000 00C0 // Port D initialization
; 0000 00C1 PORTD=0b00100000; // D.5 needs pull-up resistor
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00C2 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 0 initialization
; 0000 00C5 // Clock source: System Clock
; 0000 00C6 // Clock value: Timer 0 Stopped
; 0000 00C7 // Mode: Normal top=0xFF
; 0000 00C8 // OC0A output: Disconnected
; 0000 00C9 // OC0B output: Disconnected
; 0000 00CA TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00CB TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00CC TCNT0=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CD OCR0A=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00CE OCR0B=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00CF 
; 0000 00D0 // Timer/Counter 1 initialization
; 0000 00D1 // Clock source: System Clock
; 0000 00D2 // Clock value: Timer1 Stopped
; 0000 00D3 // Mode: Normal top=0xFFFF
; 0000 00D4 // OC1A output: Disconnected
; 0000 00D5 // OC1B output: Disconnected
; 0000 00D6 // Noise Canceler: Off
; 0000 00D7 // Input Capture on Falling Edge
; 0000 00D8 // Timer1 Overflow Interrupt: Off
; 0000 00D9 // Input Capture Interrupt: Off
; 0000 00DA // Compare A Match Interrupt: Off
; 0000 00DB // Compare B Match Interrupt: Off
; 0000 00DC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00DD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00DE TCNT1H=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00DF TCNT1L=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00E0 ICR1H=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E1 ICR1L=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00E2 OCR1AH=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00E3 OCR1AL=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00E4 OCR1BH=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00E5 OCR1BL=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00E6 
; 0000 00E7 // Timer/Counter 2 initialization
; 0000 00E8 // Clock source: System Clock
; 0000 00E9 // Clock value: Timer2 Stopped
; 0000 00EA // Mode: Normal top=0xFF
; 0000 00EB // OC2A output: Disconnected
; 0000 00EC // OC2B output: Disconnected
; 0000 00ED ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00EE TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00EF TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00F0 TCNT2=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F1 OCR2A=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00F2 OCR2B=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00F3 
; 0000 00F4 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00F5 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00F6 
; 0000 00F7 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00F8 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00F9 
; 0000 00FA // Timer/Counter 2 Interrupt(s) initialization
; 0000 00FB TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00FC 
; 0000 00FD // External Interrupt(s) initialization
; 0000 00FE // INT0: Off
; 0000 00FF // INT1: Off
; 0000 0100 // INT2: Off
; 0000 0101 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0102 // Interrupt on any change on pins PCINT8-15: Off
; 0000 0103 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0104 // Interrupt on any change on pins PCINT24-31: Off
; 0000 0105 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0106 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0107 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0108 
; 0000 0109 // USART0 initialization
; 0000 010A // USART0 disabled
; 0000 010B UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 010C 
; 0000 010D // USART1 initialization
; 0000 010E // USART1 disabled
; 0000 010F UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0110 
; 0000 0111 // Analog Comparator initialization
; 0000 0112 // Analog Comparator: Off
; 0000 0113 // The Analog Comparator's positive input is
; 0000 0114 // connected to the AIN0 pin
; 0000 0115 // The Analog Comparator's negative input is
; 0000 0116 // connected to the AIN1 pin
; 0000 0117 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0118 ADCSRB=(0<<ACME);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0119 // Digital input buffer on AIN0: On
; 0000 011A // Digital input buffer on AIN1: On
; 0000 011B DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 011C 
; 0000 011D // ADC initialization
; 0000 011E // ADC disabled
; 0000 011F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0120 
; 0000 0121 // SPI initialization
; 0000 0122 // SPI disabled
; 0000 0123 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0124 
; 0000 0125 // TWI initialization
; 0000 0126 // TWI disabled
; 0000 0127 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0128 
; 0000 0129 
; 0000 012A PORTD.6 = 1;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 012B 
; 0000 012C Stop();
;PCODE: $00000198 VOL: 0
; 0000 012D 
; 0000 012E delay_ms(1000);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 012F 
; 0000 0130 
; 0000 0131 
; 0000 0132 while (1){
;PCODE: $0000019B VOL: 0
; 0000 0133 int face, right, left;
; 0000 0134 
; 0000 0135 
; 0000 0136 face = getHCF();
;PCODE: $0000019C VOL: 0
;	face -> Y+4
;	right -> Y+2
;	left -> Y+0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0137 
; 0000 0138 right = getHCD();
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0139 left = getHCS();
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 013A 
; 0000 013B 
; 0000 013C 
; 0000 013D 
; 0000 013E if( face < 20){
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 013F mooveBackward();
;PCODE: $000001A6 VOL: 0
; 0000 0140 delay_ms(300);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0141 
; 0000 0142 if(left < right)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0143 mooveRight();
;PCODE: $000001AD VOL: 0
; 0000 0144 else
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0145 mooveLeft();
;PCODE: $000001B0 VOL: 0
; 0000 0146 delay_ms(300);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0147 
; 0000 0148 }
; 0000 0149 else if(left - right > 5 && left < 30){
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 014A mooveRight();
;PCODE: $000001C2 VOL: 0
; 0000 014B 
; 0000 014C delay_ms(300);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 014D }
; 0000 014E else if(right - left > 5 && right < 30){
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 014F mooveLeft();
;PCODE: $000001D3 VOL: 0
; 0000 0150 
; 0000 0151 delay_ms(300);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0152 }
; 0000 0153 
; 0000 0154 else{
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0155 mooveForward();
;PCODE: $000001D8 VOL: 0
; 0000 0156 
; 0000 0157 delay_ms(100);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0158 
; 0000 0159 //merge in fata
; 0000 015A }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 015B 
; 0000 015C }
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 015D }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
