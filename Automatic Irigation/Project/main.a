;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;interrupt [21] void usart0_rx_isr(void)
; 0000 0049 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004A char status,data;
; 0000 004B status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004C data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004E {
; 0000 004F rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0050 #if RX_BUFFER_SIZE0 == 256
; 0000 0051 // special case for receiver buffer size=256
; 0000 0052 if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0053 #else
; 0000 0054 if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0055 if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0056 {
; 0000 0057 rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0058 rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0059 }
; 0000 005A #endif
; 0000 005B }
;PCODE: $00000029 VOL: 0
; 0000 005C }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;char getchar(void)
; 0000 0063 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0064 char data;
; 0000 0065 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0066 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0067 #if RX_BUFFER_SIZE0 != 256
; 0000 0068 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0069 #endif
; 0000 006A #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006B --rx_counter0;
;PCODE: $00000042 VOL: 0
; 0000 006C #asm("sei")
;PCODE: $00000043 VOL: 0
; 0000 006D return data;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006E }
;PCODE: $00000047 VOL: 0
;interrupt [23] void usart0_tx_isr(void)
; 0000 007E {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007F if (tx_counter0)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0080 {
; 0000 0081 --tx_counter0;
;PCODE: $0000004C VOL: 0
; 0000 0082 UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0083 #if TX_BUFFER_SIZE0 != 256
; 0000 0084 if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0085 #endif
; 0000 0086 }
;PCODE: $00000057 VOL: 0
; 0000 0087 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;void putchar(char c)
; 0000 008E {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008F while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	c -> R17
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0090 #asm("cli")
;PCODE: $00000066 VOL: 0
; 0000 0091 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0092 {
; 0000 0093 tx_buffer0[tx_wr_index0++]=c;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0094 #if TX_BUFFER_SIZE0 != 256
; 0000 0095 if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0096 #endif
; 0000 0097 ++tx_counter0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0098 }
; 0000 0099 else
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009A UDR0=c;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009B #asm("sei")
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009C }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;interrupt [14] void timer1_compa_isr(void)
; 0000 00A9 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00AA }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;unsigned char read_adc(unsigned char adc_input)
; 0000 00B4 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B5 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;	adc_input -> R17
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B6 // Delay needed for the stabilization of the ADC input voltage
; 0000 00B7 delay_us(10);
;PCODE: $0000008E VOL: 0
; 0000 00B8 // Start the AD conversion
; 0000 00B9 ADCSRA|=(1<<ADSC);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00BA // Wait for the AD conversion to complete
; 0000 00BB while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00BC ADCSRA|=(1<<ADIF);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00BD return ADCH;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00BE }
;PCODE: $0000009E VOL: 0
;void Output(){
; 0000 00C0 void Output(){
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C1 PORTB = 0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C2 DDRB = 0b00000001;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C3 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;void Input(){
; 0000 00C5 void Input(){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C6 PORTB = 0b00000001;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C7 DDRB = 0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C8 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;void startTransmit(){
; 0000 00CA void startTransmit(){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00CB Output();
;PCODE: $000000B1 VOL: 0
; 0000 00CC PINB.0 = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00CD delay_ms(20);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00CE 
; 0000 00CF PINB.0 = 1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D0 delay_us(30);
;PCODE: $000000B9 VOL: 0
; 0000 00D1 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;void startReceive(){
; 0000 00D3 void startReceive(){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00D4 Input();
;PCODE: $000000BE VOL: 0
; 0000 00D5 delay_us(2);
;PCODE: $000000BF VOL: 0
; 0000 00D6 while(PINB.0 == 0)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D7 delay_us(1);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00D9 delay_us(2);
;PCODE: $000000C7 VOL: 0
; 0000 00DA 
; 0000 00DB while(PINB.0 == 1)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00DC delay_us(1);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DE delay_us(2);
;PCODE: $000000CF VOL: 0
; 0000 00DF }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;int readByte(){
; 0000 00E1 int readByte(){
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00E2 int n, val = 0;
; 0000 00E3 
; 0000 00E4 for(i = 0; i < 8; i++){
;PCODE: $000000D4 VOL: 0
;	n -> R16,R17
;	val -> R18,R19
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00E5 while(PINB.0 == 0)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E6 delay_us(1);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E8 delay_us(2);
;PCODE: $000000E5 VOL: 0
; 0000 00E9 
; 0000 00EA n = 0;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00EB 
; 0000 00EC while(PINB.0 == 1){
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00ED n++;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00EE delay_us(1);
;PCODE: $000000EE VOL: 0
; 0000 00EF }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F0 
; 0000 00F1 if(n > 35)
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F2 val = val * 2 + 1;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00F3 else
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00F4 val = val * 2;
;PCODE: $000000FA VOL: 0
; 0000 00F5 }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F6 
; 0000 00F7 delay_us(2);
;PCODE: $00000100 VOL: 0
; 0000 00F8 
; 0000 00F9 return val;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00FA }
;PCODE: $00000105 VOL: 0
;void main (void)
; 0000 0102 {
;PCODE: $00000106 VOL: 0
; 0000 0103 int ti, td, hi, hd, s;
; 0000 0104 float hs;
; 0000 0105 
; 0000 0106 
; 0000 0107 // Crystal Oscillator division factor: 1
; 0000 0108 #pragma optsize-
; 0000 0109 CLKPR=0x80;
;PCODE: $00000107 VOL: 0
;	ti -> R16,R17
;	td -> R18,R19
;	hi -> R20,R21
;	hd -> Y+6
;	s -> Y+4
;	hs -> Y+0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 010A CLKPR=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 010B #ifdef _OPTIMIZE_SIZE_
; 0000 010C #pragma optsize+
; 0000 010D #endif
; 0000 010E 
; 0000 010F // Input/Output Ports initialization
; 0000 0110 // Port A initialization
; 0000 0111 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0112 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0113 PORTA=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0114 DDRA=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0115 
; 0000 0116 // Port B initialization
; 0000 0117 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0118 PORTB = 0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0119 DDRB = 0b00000001;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 011A 
; 0000 011B 
; 0000 011C 
; 0000 011D // Port C initialization
; 0000 011E PORTC=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 011F DDRC=0b00000001;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0120 
; 0000 0121 // Port D initialization
; 0000 0122 PORTD=0b00100000; // D.5 needs pull-up resistor
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0123 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0124 
; 0000 0125 // Timer/Counter 0 initialization
; 0000 0126 // Clock source: System Clock
; 0000 0127 // Clock value: Timer 0 Stopped
; 0000 0128 // Mode: Normal top=FFh
; 0000 0129 // OC0 output: Disconnected
; 0000 012A TCCR0A=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 012B TCCR0B=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 012C TCNT0=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 012D OCR0A=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 012E OCR0B=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 012F 
; 0000 0130 // Timer/Counter 1 initialization
; 0000 0131 // Clock source: System Clock
; 0000 0132 // Clock value: 19.531 kHz = CLOCK/256
; 0000 0133 // Mode: CTC top=OCR1A
; 0000 0134 // OC1A output: Discon.
; 0000 0135 // OC1B output: Discon.
; 0000 0136 // Noise Canceler: Off
; 0000 0137 // Input Capture on Falling Edge
; 0000 0138 // Timer 1 Overflow Interrupt: Off
; 0000 0139 // Input Capture Interrupt: Off
; 0000 013A // Compare A Match Interrupt: On
; 0000 013B // Compare B Match Interrupt: Off
; 0000 013C 
; 0000 013D TCCR1A=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 013E TCCR1B=0x0D;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 013F TCNT1H=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0140 TCNT1L=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0141 ICR1H=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0142 ICR1L=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0143 
; 0000 0144 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
; 0000 0145 // 4C40H = 4CH (MSB) and 40H (LSB)
; 0000 0146 OCR1AH=0x4C;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0147 OCR1AL=0x40;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0148 
; 0000 0149 OCR1BH=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 014A OCR1BL=0x00;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 014B 
; 0000 014C // Timer/Counter 2 initialization
; 0000 014D // Clock source: System Clock
; 0000 014E // Clock value: Timer2 Stopped
; 0000 014F // Mode: Normal top=0xFF
; 0000 0150 // OC2A output: Disconnected
; 0000 0151 // OC2B output: Disconnected
; 0000 0152 ASSR=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0153 TCCR2A=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0154 TCCR2B=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0155 TCNT2=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0156 OCR2A=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0157 OCR2B=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0158 
; 0000 0159 // External Interrupt(s) initialization
; 0000 015A // INT0: Off
; 0000 015B // INT1: Off
; 0000 015C // INT2: Off
; 0000 015D // Interrupt on any change on pins PCINT0-7: Off
; 0000 015E // Interrupt on any change on pins PCINT8-15: Off
; 0000 015F // Interrupt on any change on pins PCINT16-23: Off
; 0000 0160 // Interrupt on any change on pins PCINT24-31: Off
; 0000 0161 EICRA=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0162 EIMSK=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0163 PCICR=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0164 
; 0000 0165 // Timer/Counter 0,1,2 Interrupt(s) initialization
; 0000 0166 TIMSK0=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0167 TIMSK1=0x02;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0168 TIMSK2=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0169 
; 0000 016A // USART0 initialization
; 0000 016B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 016C // USART0 Receiver: On
; 0000 016D // USART0 Transmitter: On
; 0000 016E // USART0 Mode: Asynchronous
; 0000 016F // USART0 Baud rate: 9600
; 0000 0170 UCSR0A=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0171 UCSR0B=0xD8;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0172 UCSR0C=0x06;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0173 UBRR0H=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0174 UBRR0L=0x81;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0175 
; 0000 0176 // USART1 initialization
; 0000 0177 // USART1 disabled
; 0000 0178 UCSR1B=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0179 
; 0000 017A 
; 0000 017B // Analog Comparator initialization
; 0000 017C // Analog Comparator: Off
; 0000 017D // The Analog Comparator's positive input is
; 0000 017E // connected to the AIN0 pin
; 0000 017F // The Analog Comparator's negative input is
; 0000 0180 // connected to the AIN1 pin
; 0000 0181 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0182 // Digital input buffer on AIN0: On
; 0000 0183 // Digital input buffer on AIN1: On
; 0000 0184 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0185 
; 0000 0186 // ADC initialization
; 0000 0187 // ADC Clock frequency: 1000,000 kHz
; 0000 0188 // ADC Voltage Reference: AVCC pin
; 0000 0189 // ADC Auto Trigger Source: Free Running
; 0000 018A // Only the 8 most significant bits of
; 0000 018B // the AD conversion result are used
; 0000 018C // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 018D // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 018E DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 018F ADMUX=ADC_VREF_TYPE;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0190 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0191 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0192 
; 0000 0193 // Watchdog Timer initialization
; 0000 0194 // Watchdog Timer Prescaler: OSC/2048
; 0000 0195 #pragma optsize-
; 0000 0196 #asm("wdr")
;PCODE: $0000016A VOL: 0
; 0000 0197 // Write 2 consecutive values to enable watchdog
; 0000 0198 // this is NOT a mistake !
; 0000 0199 WDTCSR=0x18;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 019A WDTCSR=0x08;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 019B #ifdef _OPTIMIZE_SIZE_
; 0000 019C #pragma optsize+
; 0000 019D #endif
; 0000 019E 
; 0000 019F 
; 0000 01A0 
; 0000 01A1 
; 0000 01A2 #asm("sei")             // enable interrupts
;PCODE: $0000016F VOL: 0
; 0000 01A3 LED1 = 1;               // initial state, will be changed by timer 1
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 01A4 PINB.0 = 1;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 01A5 PORTC.0 = 1;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 01A6 delay_ms(2000);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01A7 
; 0000 01A8 
; 0000 01A9 while(1)
;PCODE: $00000178 VOL: 0
; 0000 01AA {
; 0000 01AB startTransmit();
;PCODE: $00000179 VOL: 0
; 0000 01AC startReceive();
;PCODE: $0000017A VOL: 0
; 0000 01AD hi = readByte();
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 01AE hd = readByte();
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 01AF ti = readByte();
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 01B0 td = readByte();
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01B1 s = readByte();
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 01B2 delay_ms(1);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 01B3 hs = read_adc(0);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 01B4 hs = 255 - hs;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01B5 hs = hs / 1.88;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 01B6 
; 0000 01B7 
; 0000 01B8 if(cnt >= 150 || fr == true){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 01B9 fr = false;
;PCODE: $0000019C VOL: 0
; 0000 01BA 
; 0000 01BB if( hs < 70){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 01BC PORTC.0 = 0;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 01BD delay_ms(100);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 01BE 
; 0000 01BF printf("Udare...\n");
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 01C0 delay_ms(5000);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 01C1 PORTC.0 = 1;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 01C2 }
; 0000 01C3 
; 0000 01C4 cnt = 0;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 01C5 }
; 0000 01C6 
; 0000 01C7 
; 0000 01C8 
; 0000 01C9 delay_ms(100);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 01CA 
; 0000 01CB printf("Humidity: %d.%d\n", hi, hd);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01CC delay_ms(100);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 01CD printf("Temperature: %d.%d\n", ti, td);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 01CE delay_ms(100);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01CF printf("Soil humidity: %d\n", (int)hs);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01D0 
; 0000 01D1 cnt++;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 01D2 delay_ms(2000);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 01D3 
; 0000 01D4 
; 0000 01D5 }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 01D6 
; 0000 01D7 
; 0000 01D8 }// end main loop
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
