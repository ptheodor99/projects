
#include <mega164a.h>

#include <stdio.h>
#include <delay.h>  
//#include <string.h> 
//#include <stdlib.h>
#include "defs.h"

//#include <i2c.h>
#include <glcd.h>
#include <font5x7.h>




#ifndef RXB8
#define RXB8 1
#endif

#ifndef TXB8
#define TXB8 0
#endif

#ifndef UPE
#define UPE 2
#endif

#ifndef DOR
#define DOR 3
#endif

#ifndef FE
#define FE 4
#endif

#ifndef UDRE
#define UDRE 5
#endif

#ifndef RXC
#define RXC 7
#endif

#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)

// USART0 Receiver buffer
#define RX_BUFFER_SIZE0 8
char rx_buffer0[RX_BUFFER_SIZE0];

#if RX_BUFFER_SIZE0 <= 256
unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
#else
unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
#endif

// This flag is set on USART0 Receiver buffer overflow
bit rx_buffer_overflow0;

// USART0 Receiver interrupt service routine
interrupt [USART0_RXC] void usart0_rx_isr(void)
{
char status,data;
status=UCSR0A;
data=UDR0;
if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
   {
   rx_buffer0[rx_wr_index0++]=data;
#if RX_BUFFER_SIZE0 == 256
   // special case for receiver buffer size=256
   if (++rx_counter0 == 0) rx_buffer_overflow0=1;
#else
   if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
   if (++rx_counter0 == RX_BUFFER_SIZE0)
      {
      rx_counter0=0;
      rx_buffer_overflow0=1;
      }
#endif
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART0 Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
char data;
while (rx_counter0==0);
data=rx_buffer0[rx_rd_index0++];
#if RX_BUFFER_SIZE0 != 256
if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
#endif
#asm("cli")
--rx_counter0;
#asm("sei")
return data;
}
#pragma used-
#endif

// USART0 Transmitter buffer
#define TX_BUFFER_SIZE0 8
char tx_buffer0[TX_BUFFER_SIZE0];

#if TX_BUFFER_SIZE0 <= 256
unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
#else
unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
#endif

// USART0 Transmitter interrupt service routine
interrupt [USART0_TXC] void usart0_tx_isr(void)
{
if (tx_counter0)
   {
   --tx_counter0;
   UDR0=tx_buffer0[tx_rd_index0++];
#if TX_BUFFER_SIZE0 != 256
   if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
#endif
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Write a character to the USART0 Transmitter buffer
#define _ALTERNATE_PUTCHAR_
#pragma used+
void putchar(char c)
{
while (tx_counter0 == TX_BUFFER_SIZE0);
#asm("cli")
if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
   {
   tx_buffer0[tx_wr_index0++]=c;
#if TX_BUFFER_SIZE0 != 256
   if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
#endif
   ++tx_counter0;
   }
else
   UDR0=c;
#asm("sei")
}
#pragma used-
#endif
//*************************************************************************************************
//********************END SERIAL STUFF (USART0)  **************************************************
//*************************************************************************************************
//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
//*************************************************************************************************


/*
 * Timer 1 Output Compare A interrupt is used to blink LED
 */
interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
	LED1 = ~LED1; // invert LED
}

/*
 * main function of program
 */ 
 
 
 
 



 
void main (void)
{
    unsigned char temp, i;
    //char* a = "Hello";
    
    GLCDINIT_t glcd_init_data;
    i2c_init();
    glcd_init_data.font=font5x7;
    // No function is used for reading
    // image data from external memory
    glcd_init_data.readxmem=NULL;
    // No function is used for writing
    // image data to external memory
    glcd_init_data.writexmem=NULL;
    // Set horizontal display reverse state
    glcd_init_data.reverse_x=SSD1306_DEFAULT_REVX;
    // Set vertical display reverse state
    glcd_init_data.reverse_y=SSD1306_DEFAULT_REVY;
    // Specify if the display is interlaced or not
    glcd_init_data.interlaced=SSD1306_DEFAULT_INTERLACED;
    // The Vcc voltage is generated by the internal DC/DC converter
    glcd_init_data.external_vcc=SSD1306_USE_INTERNAL_DCDC;
    // Set display contrast
    glcd_init_data.contrast=SSD1306_DEFAULT_CONTRAST;

    glcd_init(&glcd_init_data);
     
    
    
    
    glcd_outtext(a);

    
    
    
    
    
    
    
    
    
        
        
	

	Init_initController();  // this must be the first "init" action/call!
#asm("sei")             // enable interrupts
	LED1 = 1;           	// initial state, will be changed by timer 1

	while(TRUE)
		{   
                
        
        


        
		wdogtrig();	        // call often else processor will reset
		if(rx_counter0)     // if a character is available on serial port USART0
			{
			temp = getchar();
			if(temp == '?')
				printf("\r\nTeam No 2");
			else
				putchar(temp + 1);		// echo back the character + 1 ("a" becomes "b", etc)
			}

		if(SW1 == 0)        // pressed
			{
			delay_ms(30);   // debounce switch
			if(SW1 == 0)
				{
				// LED will blink slow or fast
				while(SW1 == 0)
					wdogtrig();    // wait for release
				// alternate between values and values/4 for OCR1A register
				// 4C40H / 4 = 1310H
				// new frequency = old frequency * 4
				if(OCR1AH == 0x4C)
					{TCNT1H = 0; TCNT1L = 0; OCR1AH = 0x13; OCR1AL = 0x10;}
                else if(OCR1AH == 0x13)
                    {TCNT1H = 0; TCNT1L = 0; OCR1AH = 0x2F; OCR1AL = 0x20;}
				else
					{TCNT1H = 0; TCNT1L = 0; OCR1AH = 0x4C; OCR1AL = 0x40;}
				}
			}   

		// measure time intervals on oscilloscope connected to pin TESTP
		for(i = 0; i < 3; i++)
			{
			TESTP = 1;
			delay_us(1);
			TESTP = 0;   // may check accuracy of 1us interval on oscilloscope
			}
		}


}


